// AUTOGENERATED BY private/apigen
// DO NOT EDIT.

package privateapi

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/spacemonkeygo/monkit/v3"
	"github.com/zeebo/errs"
	"go.uber.org/zap"

	"storj.io/storj/private/api"
	"storj.io/storj/satellite/console"
)

var ErrAuthAPI = errs.Class("privateapi auth api")

type AuthManagementService interface {
	GetUserAccount(ctx context.Context, authUser *console.User) (*console.UserAccount, api.HTTPError)
}

// AuthManagementHandler is an api handler that implements all AuthManagement API endpoints functionality.
type AuthManagementHandler struct {
	log     *zap.Logger
	mon     *monkit.Scope
	service AuthManagementService
	cors    api.CORS
	auth    api.Auth
}

func NewAuthManagement(log *zap.Logger, mon *monkit.Scope, service AuthManagementService, router *mux.Router, cors api.CORS, auth api.Auth) *AuthManagementHandler {
	handler := &AuthManagementHandler{
		log:     log,
		mon:     mon,
		service: service,
		cors:    cors, auth: auth,
	}

	authRouter := router.PathPrefix("/api/v1/auth").Subrouter()
	authRouter.HandleFunc("/account", handler.handleGetUserAccount).Methods("GET")

	return handler
}

func (h *AuthManagementHandler) handleGetUserAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	var err error
	defer h.mon.Task()(&ctx)(&err)

	w.Header().Set("Content-Type", "application/json")

	isPreflight := h.cors.Handle(w, r)
	if isPreflight {
		return
	}

	ctx, err = h.auth.IsAuthenticated(ctx, r, true, false)
	if err != nil {
		h.auth.RemoveAuthCookie(w)
		api.ServeError(h.log, w, http.StatusUnauthorized, err)
		return
	}

	authUser, err := console.GetUser(ctx)
	if err != nil {
		h.auth.RemoveAuthCookie(w)
		api.ServeError(h.log, w, http.StatusUnauthorized, err)
		return
	}

	retVal, httpErr := h.service.GetUserAccount(ctx, authUser)
	if httpErr.Err != nil {
		api.ServeError(h.log, w, httpErr.Status, httpErr.Err)
		return
	}

	err = json.NewEncoder(w).Encode(retVal)
	if err != nil {
		h.log.Debug("failed to write json GetUserAccount response", zap.Error(ErrAuthAPI.Wrap(err)))
	}
}
